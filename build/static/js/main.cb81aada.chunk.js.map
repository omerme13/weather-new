{"version":3,"sources":["img/arrow-right.svg","img/Rectangle2.svg","components/Icon/Icon.js","components/Nav/ArrowButton/ArrowButton.js","components/Nav/Nav.js","components/SearchBox/SearchBox.js","components/WeatherBoxes/WeatherBox/WeatherBox.js","components/WeatherBoxes/TodayBox/TodayBox.js","components/WeatherBoxes/WeatherBoxes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","icon","props","react_default","a","createElement","className","src","alt","concat","onClick","clicked","arrowButton","side","right","Icon","arrowIcon","nav","c","show","ArrowButton_ArrowButton","displaySecondPart","displayFirstPart","searchBox","searchIcon","getWeather","type","placeholder","weatherBox","class","day","minTemp","maxTemp","cond","todayBox","city","deg","convertDayToString","weatherBoxes","updatedData","Object","toConsumableArray","data","todayData","shift","TodayBox_TodayBox","temp","condition","map","box","WeatherBox_WeatherBox","key","tempMin","tempMax","iconURL","changeDays","apiKey","App","state","displayWeather","uploadWeather","_this","then","res","catch","err","console","log","changeWeather","e","target","nextSibling","value","setState","_callee","currDay","response","responseData","i","dayNum","regenerator_default","wrap","_context","prev","next","Date","fetch","sent","json","getDay","push","list","main","toFixed","temp_max","temp_min","weather","description","abrupt","stop","this","_this2","SearchBox_SearchBox","Nav_Nav","WeatherBoxes_WeatherBoxes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb81aada.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow-right.b9132fa5.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rectangle2.a567da88.svg\";","import React from 'react';\n\nconst icon = props => (\n    <img \n        className={props.className} \n        src={props.src} \n        alt={`icon ${props.className}`} \n        onClick={props.clicked}\n    />\n);\n\nexport default icon;","import React from 'react';\n\nimport Icon from '../../Icon/Icon';\nimport arrowIcon from '../../../img/arrow-right.svg';\n\nimport './ArrowButton.scss';\n\nconst arrowButton = props => {\n    let side = props.right \n        ? \"right\"\n        : \"left\";\n\n    return (\n        <Icon \n            className={`arrow-button arrow-button--${side}`} \n            src={arrowIcon} \n            clicked={props.clicked}\n        />\n    );\n};\n\nexport default arrowButton;","import React from 'react';\n\nimport ArrowButton from './ArrowButton/ArrowButton';\n\nimport './Nav.scss';\n\nconst nav = props => {\n    let arrowButton = null;\n    let c = null;\n\n    if (props.show === \"first\") {\n        arrowButton = <ArrowButton right clicked={props.displaySecondPart} />;\n    } else {\n        arrowButton = <ArrowButton clicked={props.displayFirstPart} />\n        c = \"move\";\n    }\n\n    return (\n        <div className={`nav ${c}`}>\n            {arrowButton} \n        </div>\n    );\n};\n\nexport default nav;","import React from 'react'\n\nimport searchIcon from '../../img/Rectangle2.svg';\nimport Icon from '../Icon/Icon';\n\nimport './SearchBox.scss';\n\nconst searchBox = props => (  \n    <div className=\"search-box\">\n        <div className=\"search-box__container\"> \n            <Icon \n                className=\"search-box__icon\" \n                src={searchIcon} \n                clicked={props.getWeather}\n            />\n            <input \n                className=\"search-box__input\" \n                type=\"text\" \n                placeholder=\"Search another city\" \n            />\n        </div>\n    </div>\n)\n\nexport default searchBox;","import React from 'react'\n\nimport Icon from '../../Icon/Icon';\n\nimport './WeatherBox.scss';\n\nconst weatherBox = props => {\n    return (\n        <div className={`weather-box ${props.class}`}>\n            <div className=\"weather-box__day\">{props.day}</div>\n            <Icon className=\"weather-box__icon\" src={props.icon} />\n            <div className=\"weather-box__degrees\">\n                {props.minTemp}&deg;/{props.maxTemp}&deg;\n            </div>\n            <div className=\"weather-box__cond\">{props.cond}</div>\n        </div>\n    );\n}\n\nexport default weatherBox;","import React from 'react'\n\n\nimport './TodayBox.scss';\n\nconst todayBox = props => {\n    return (\n        <div className=\"today-box\">\n            <div className=\"today-box__location\">{props.city}</div>\n            <div className=\"today-box__day\">today</div>\n            <div className=\"today-box__degrees\">{props.deg}&deg;</div>\n            <div className=\"today-box__cond\">{props.cond}</div>\n        </div>\n    );\n}\n\nexport default todayBox;\n","import React from 'react'\n\nimport WeatherBox from './WeatherBox/WeatherBox';\nimport TodayBox from '../WeatherBoxes/TodayBox/TodayBox';\n\nimport './WeatherBoxes.scss';\n\nconst convertDayToString = (day) => {\n    switch(day) {\n        case 0: \n            return 'Sunday';\n        case 1: \n            return 'Monday';    \n        case 2: \n            return 'Tuesday';\n        case 3: \n            return 'Wednesday';  \n        case 4: \n            return 'Thursday';\n        case 5: \n            return 'Friday'; \n        default: \n            return 'Saturday'                 \n    }\n}\n\nconst weatherBoxes = props => {\n    const updatedData = [...props.data];\n    const todayData = updatedData.shift();\n\n    return (\n        <div className={`weather-boxes ${props.class}`}>\n            <TodayBox \n                city={props.city} \n                deg={todayData.temp}\n                cond={todayData.condition}\n            />\n            {updatedData.map(box => (\n                <WeatherBox \n                    key={box.day}\n                    minTemp={box.tempMin}\n                    maxTemp={box.tempMax}\n                    cond={box.condition}\n                    icon={box.iconURL}\n                    day={convertDayToString(box.day)}\n                    class={props.changeDays}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default weatherBoxes;","import React, { Component } from 'react';\n\nimport Nav from './components/Nav/Nav';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport WeatherBoxes from './components/WeatherBoxes/WeatherBoxes';\n\nimport './App.scss';\n\nconst apiKey = '352ab6b8c9501a470633fda871c77221';\n\nclass App extends Component {\n    state = {\n        city: 'new york',\n        data: [{}],\n        displayWeather: \"first\"\n    }\n\n    componentDidMount() {\n        this.uploadWeather() \n    }\n\n    uploadWeather = () => {\n        this.getWeather(this.state.city)\n            .then(res => res)\n            .catch(err => console.log(err));\n    }\n    \n    changeWeather = (e) => {\n        const city = e.target.nextSibling.value;\n\n        this.getWeather(city)\n            .then(res => res)\n            .catch(err => console.log(err));\n    }\n\n    displaySecondPart = () => {\n        this.setState({displayWeather: \"second\"});\n    }\n\n    displayFirstPart = () => {\n        this.setState({displayWeather: \"first\"});\n\n    }\n\n    getWeather = async (city) => {           \n        const data = [];\n        let currDay = new Date();\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&cnt=40&APPID=${apiKey}`);\n        const responseData = await response.json();\n\n        for (let i = 0; i < 40; i = i + 8) {\n            let dayNum = (currDay.getDay() + (i/8)) % 7;\n            data.push({\n                day: dayNum,\n                temp: (responseData.list[i].main.temp - 273.15).toFixed(0),\n                tempMax: (responseData.list[i].main.temp_max - 273.15).toFixed(0),\n                tempMin: (responseData.list[i].main.temp_min - 273.15).toFixed(0),\n                condition: responseData.list[i].weather[0].description,\n                iconURL: 'https://openweathermap.org/img/w/' + responseData.list[i].weather[0].icon + '.png'\n            });\n        }\n\n        this.setState({\n            city: city,\n            data: data\n        });\n\n        return responseData;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SearchBox getWeather={(e) => this.changeWeather(e)}/>\n                <Nav \n                    displaySecondPart={this.displaySecondPart} \n                    displayFirstPart={this.displayFirstPart} \n                    show={this.state.displayWeather}\n                />\n                <WeatherBoxes \n                    city={this.state.city}\n                    data={this.state.data}\n                    class={this.state.class}\n                    changeDays={this.state.displayWeather}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './variables.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}