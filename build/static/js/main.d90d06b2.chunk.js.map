{"version":3,"sources":["img/arrow-right.svg","img/Rectangle2.svg","components/Icon/Icon.js","components/Nav/ArrowButton/ArrowButton.js","components/Nav/Nav.js","components/SearchBox.js","components/WeatherBoxes/WeatherBox/WeatherBox.js","components/WeatherBoxes/TodayBox/TodayBox.js","components/WeatherBoxes/WeatherBoxes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","icon","props","react_default","a","createElement","className","src","alt","concat","onClick","clicked","arrowButton","side","right","Icon","arrowIcon","nav","ArrowButton_ArrowButton","slideBoxesBack","slideBoxes","searchBox","searchIcon","getWeather","type","placeholder","weatherBox","class","day","minTemp","maxTemp","cond","todayBox","city","deg","convertDayToString","weatherBoxes","updatedData","Object","toConsumableArray","data","todayData","shift","TodayBox_TodayBox","temp","condition","map","box","WeatherBox_WeatherBox","key","tempMin","tempMax","iconURL","changeDays","App","state","displayWeather","uploadWeather","_this","then","res","console","log","catch","err","changeWeather","e","target","nextSibling","value","setState","this","currDay","Date","fetch","response","json","responseData","i","dayNum","getDay","push","list","main","toFixed","temp_max","temp_min","weather","description","_this2","components_SearchBox","Nav_Nav","WeatherBoxes_WeatherBoxes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d90d06b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow-right.5bbca498.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rectangle2.7b3569e9.svg\";","import React from 'react';\r\n\r\nconst icon = props => (\r\n    <img \r\n        className={props.className} \r\n        src={props.src} \r\n        alt={`icon ${props.className}`} \r\n        onClick={props.clicked}\r\n    />\r\n);\r\n\r\nexport default icon;","import React from 'react';\r\n\r\nimport Icon from '../../Icon/Icon';\r\nimport arrowIcon from '../../../img/arrow-right.svg';\r\n\r\nimport './ArrowButton.scss';\r\n\r\nconst arrowButton = props => {\r\n    let side = props.right \r\n        ? \"right\"\r\n        : \"left\";\r\n\r\n    return (\r\n        <Icon \r\n            className={`arrow-button arrow-button--${side}`} \r\n            src={arrowIcon} \r\n            clicked={props.clicked}\r\n        />\r\n    );\r\n};\r\n\r\nexport default arrowButton;","import React from 'react';\r\n\r\nimport ArrowButton from './ArrowButton/ArrowButton';\r\n\r\nimport './Nav.scss';\r\n\r\nconst nav = props => (\r\n    <div className=\"nav\">\r\n        <ArrowButton clicked={props.slideBoxesBack}/>\r\n        <ArrowButton right clicked={props.slideBoxes} />\r\n    </div>\r\n);\r\n\r\nexport default nav;","import React from 'react'\r\n\r\nimport searchIcon from '../img/Rectangle2.svg';\r\nimport Icon from './Icon/Icon';\r\n\r\nimport './SearchBox.scss';\r\n\r\nconst searchBox = props => (  \r\n    <div className=\"search-box\">\r\n        <div className=\"search-box__container\"> \r\n            <Icon className =\"search-box__icon\" src={searchIcon} clicked={props.getWeather}/>\r\n            <input \r\n                className=\"search-box__input\" \r\n                type=\"text\" \r\n                placeholder=\"Search another city\" \r\n            />\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default searchBox;","import React from 'react'\r\n\r\nimport Icon from '../../Icon/Icon';\r\n\r\nimport './WeatherBox.scss';\r\n\r\nconst weatherBox = props => {\r\n    return (\r\n        <div className={`weather-box ${props.class}`}>\r\n            <div className=\"weather-box__day\">{props.day}</div>\r\n            <Icon className=\"weather-box__icon\" src={props.icon} />\r\n            <div className=\"weather-box__degrees\">\r\n                {props.minTemp}&deg;/{props.maxTemp}&deg;\r\n            </div>\r\n            <div className=\"weather-box__cond\">{props.cond}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default weatherBox;","import React from 'react'\r\n\r\n\r\nimport './TodayBox.scss';\r\n\r\nconst todayBox = props => {\r\n    return (\r\n        <div className=\"today-box\">\r\n            <div className=\"today-box__location\">{props.city}</div>\r\n            <div className=\"today-box__day\">today</div>\r\n            <div className=\"today-box__degrees\">{props.deg}&deg;</div>\r\n            <div className=\"today-box__cond\">{props.cond}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default todayBox;\r\n","import React from 'react'\r\n\r\nimport WeatherBox from './WeatherBox/WeatherBox';\r\nimport TodayBox from '../WeatherBoxes/TodayBox/TodayBox';\r\n\r\nimport './WeatherBoxes.scss';\r\n\r\nconst convertDayToString = (day) => {\r\n    switch(day) {\r\n        case 0: \r\n            return 'Sunday';\r\n        case 1: \r\n            return 'Monday';    \r\n        case 2: \r\n            return 'Tuesday';\r\n        case 3: \r\n            return 'Wednesday';  \r\n        case 4: \r\n            return 'Thursday';\r\n        case 5: \r\n            return 'Friday'; \r\n        default: \r\n            return 'Saturday'                 \r\n    }\r\n}\r\n\r\nconst weatherBoxes = props => {\r\n    const updatedData = [...props.data];\r\n    const todayData = updatedData.shift();\r\n\r\n    return (\r\n        <div className={`weather-boxes ${props.class}`}>\r\n            <TodayBox \r\n                city={props.city} \r\n                deg={todayData.temp}\r\n                cond={todayData.condition}\r\n            />\r\n            {updatedData.map(box => (\r\n                <WeatherBox \r\n                    key={box.day}\r\n                    minTemp={box.tempMin}\r\n                    maxTemp={box.tempMax}\r\n                    cond={box.condition}\r\n                    icon={box.iconURL}\r\n                    day={convertDayToString(box.day)}\r\n                    class={props.changeDays}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default weatherBoxes;","import React, { Component } from 'react';\r\n\r\nimport Nav from './components/Nav/Nav';\r\nimport SearchBox from './components/SearchBox';\r\nimport WeatherBoxes from './components/WeatherBoxes/WeatherBoxes';\r\n\r\nimport './App.scss';\r\n\r\nconst apiKey = '352ab6b8c9501a470633fda871c77221';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        city: 'new york',\r\n        data: [{}],\r\n        // class: \"\",\r\n        displayWeather: \"first\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.uploadWeather() \r\n    }\r\n\r\n    uploadWeather = () => {\r\n        this.getWeather(this.state.city)\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(err));\r\n    }\r\n    \r\n    changeWeather = (e) => {\r\n        const city = e.target.nextSibling.value;\r\n\r\n        this.getWeather(city)\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    slideBoxes = () => {\r\n        // this.setState({class: \"slide\"});\r\n        this.setState({displayWeather: \"second\"});\r\n    }\r\n\r\n    slideBoxesBack = () => {\r\n        // this.setState({class: \"\"});\r\n        this.setState({displayWeather: \"first\"});\r\n\r\n    }\r\n\r\n    async getWeather(city) {           \r\n        const data = [];\r\n        let currDay = new Date();\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&cnt=40&APPID=${apiKey}`);\r\n        const responseData = await response.json();\r\n\r\n        for (let i = 0; i < 40; i = i + 7) {\r\n            let dayNum = (currDay.getDay() + (i/7)) % 7;\r\n            data.push({\r\n                day: dayNum,\r\n                temp: (responseData.list[i].main.temp - 273.15).toFixed(0),\r\n                tempMax: (responseData.list[i].main.temp_max - 273.15).toFixed(0),\r\n                tempMin: (responseData.list[i].main.temp_min - 273.15).toFixed(0),\r\n                condition: responseData.list[i].weather[0].description,\r\n                iconURL: 'https://openweathermap.org/img/w/' + responseData.list[i].weather[0].icon + '.png'\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            city: city,\r\n            data: data\r\n        });\r\n\r\n        return responseData;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <SearchBox getWeather={(e) => this.changeWeather(e)}/>\r\n                <Nav \r\n                    slideBoxes={this.slideBoxes} \r\n                    slideBoxesBack={this.slideBoxesBack} \r\n                />\r\n                <WeatherBoxes \r\n                    city={this.state.city}\r\n                    data={this.state.data}\r\n                    class={this.state.class}\r\n                    changeDays={this.state.displayWeather}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './variables.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}